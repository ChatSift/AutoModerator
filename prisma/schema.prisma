generator kysely {
  provider = "prisma-kysely"
  output   = "../packages/core/src"
  fileName = "db.ts"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum LogChannelType {
  mod
  filter
  user
  message
}

model LogChannelWebhook {
  guildId      String         
  logType      LogChannelType 
  channelId    String         
  webhookId    String         
  webhookToken String         
  threadId     String?        

  @@id([guildId, logType])
}

enum CaseAction {
  warn
  mute
  unmute
  kick
  softban
  ban
  unban
}

model Case {
  id           Int          @id @default(autoincrement())
  guildId      String
  logChannelId String?
  logMessageId String?
  caseId       Int
  refId        Int?
  targetId     String
  targetTag    String
  modId        String?
  modTag       String?
  actionType   CaseAction
  reason       String?
  expiresAt    DateTime?    @db.Timestamptz(6)
  pardonedBy   String?
  createdAt    DateTime     @default(now()) @db.Timestamptz(6)
  useTimeouts  Boolean      @default(true)
  deleteDays   Int?
  unmuteRoles  UnmuteRole[]
}

model UnmuteRole {
  caseId Int
  roleId String
  case   Case   @relation(fields: [caseId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([caseId, roleId])
}

enum TaskType {
  timedModAction
}

model Task {
  id        Int      @id @default(autoincrement())
  type      TaskType
  guildId   String
  createdAt DateTime @default(now()) @db.Timestamptz(6)
  runAt     DateTime @db.Timestamptz(6)
  attempts  Int      @default(0)
  data      Json
}
